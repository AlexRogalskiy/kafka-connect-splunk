#!/usr/bin/env groovy

@Library('jenkinstools@master') _

import com.splunk.jenkins.DockerRequest;
import com.splunk.tool.plugin.docker.extension.BadDockerExitCode;

def dockerReq = new DockerRequest(steps,
                                  currentBuild,
                                  env,
                                  [userId: "10777",
                                   repoName: "git@github.com:splunk/kafka-connect-splunk.git",
                                   runner: "yarn",
                                   remotePath: "/build"])


withSplunkWrapNode("master") {
    def imageName = "repo.splunk.com/splunk/gdi/kafka-connect-splunk:build-${env.BUILD_NUMBER}"

    try {
        stage("setup orca") {
            println "=============setup orca=============="
            withCredentials([file(credentialsId: 'gdi_connectors_orca', variable: 'ORCA_CREDENTIALS')]) {
                sh "tar -ovxf $ORCA_CREDENTIALS";
                splunkPrepareAndCheckOut request: dockerReq,
                                         files: "${WORKSPACE}/.orca, ${WORKSPACE}/.ssh";
            }
            splunkRunScript request:dockerReq,
                            script:
                                """
                                pip install virtualenv
                                virtualenv venv
                                source venv/bin/activate
                                venv/bin/pip install splunk_orca==1.1.0 -i https://repo.splunk.com/artifactory/api/pypi/pypi/simple
                                venv/bin/splunk_orca --version
                                """;
        }
        stage("run ci") {
            println "=============run ci build=============="
            withCredentials([file(credentialsId: 'gdi_connectors_orca', variable: 'ORCA_CREDENTIALS')]) {
                sh "tar -ovxf $ORCA_CREDENTIALS";
                splunkPrepareAndCheckOut request: dockerReq,
                                         files: "${WORKSPACE}/.orca, ${WORKSPACE}/.ssh";
            }
            splunkRunScript request:dockerReq,
                            script:
                                """
                                chmod +x ci/cloud_ci_kafka.sh && sh ci/cloud_ci_kafka.sh
                                """;
        }
        stage('Build image') {
            println "=============build image=============="
            withCredentials([file(credentialsId: 'gdi_connectors_orca', variable: 'ORCA_CREDENTIALS')]) {
                sh "tar -ovxf $ORCA_CREDENTIALS";
                splunkPrepareAndCheckOut request: dockerReq,
                                         files: "${WORKSPACE}/.orca, ${WORKSPACE}/.ssh";
            }
            splunkDockerImageBuild workDir: "/build/kafka-connect-splunk/ci",
                                   imageName: imageName,
                                   dockerfilePath: "Dockerfile.kafka-connect-splunk"
        }
        stage('Run image') {
            println "=============run kafka and integration tests=============="
            splunkDockerStart imageName: imageName,
                              mountBindings: '/var/run/docker.sock:/var/run/docker.sock:ro',
                              script:
                              """
                              /bin/bash -c /kafka-connect/run_kafka_connect.sh
                              """;
        }
    }
    catch (BadDockerExitCode e) {
        currentBuild.result = "FAILURE";
        echo "Exception Caught: ${e.getMessage()}";
        echo "Stack Trace: ${e.printStackTrace()}";
    }
    catch (Exception e) {
        currentBuild.result = "FAILURE";
        echo "Exception Caught: ${e.getMessage()}";
        echo "Stack Trace: ${e.printStackTrace()}";
    }
    finally {
        steps.cleanWs();
    }
}
